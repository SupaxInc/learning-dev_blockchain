pragma solidity ^0.4.18;

// Solidity from @dev_zl, edited to suit my tutorial
// from: https://hackernoon.com/ethereum-development-walkthrough-part-1-smart-contracts-b3979e6e573e

contract Wrestling {
	address public wrestler1;
	address public wrestler2;

	bool public wrestler1Played;
	bool public wrestler2Played;

	uint public wrestler1Deposit;
	uint public wrestler2Deposit;

	bool public gameFinished;
	bool public hasWinnerWithdrawn;
    address public theWinner;
    uint public gains;

	event EndOfRoundEvent(uint wrestler1Deposit, uint wrestler2Deposit);
	event EndOfWrestlingEvent(address winner, uint gains);

	constructor() public {
        gameFinished = false;
        hasWinnerWithdrawn = false;
        wrestler1Played = false;
        wrestler2Played = false;
        wrestler1 = address(0);
        wrestler2 = address(0);
        wrestler1Deposit = 0;
        wrestler2Deposit = 0;
        gains = 0;
	}

	function registerWrestler1() public {
        require(wrestler1 == address(0));

        wrestler1 = msg.sender;
    }
    
    function registerWrestler2() public {
        require(wrestler2 == address(0));
        
        wrestler2 = msg.sender;
    }

    function wrestle() public payable {
    	require(!gameFinished && (msg.sender == wrestler1 || msg.sender == wrestler2));

    	if(msg.sender == wrestler1) {
    		require(wrestler1Played == false);
    		wrestler1Played = true;
    		wrestler1Deposit = wrestler1Deposit + msg.value;
    	} else {
    		require(wrestler2Played == false);
    		wrestler2Played = true;
    		wrestler2Deposit = wrestler2Deposit + msg.value;
    	}
    	if(wrestler1Played && wrestler2Played) {
    		if(wrestler1Deposit >= wrestler2Deposit * 2) {
    			endOfGame(wrestler1);
    		} else if (wrestler2Deposit >= wrestler1Deposit * 2) {
    			endOfGame(wrestler2);
    		} else {
                endOfRound();
    		}
    	}
    }

    function endOfRound() internal {
    	wrestler1Played = false;
    	wrestler2Played = false;

    	emit EndOfRoundEvent(wrestler1Deposit, wrestler2Deposit);
    }

    function endOfGame(address winner) internal {
        gameFinished = true;
        theWinner = winner;

        gains = wrestler1Deposit + wrestler2Deposit;
        emit EndOfWrestlingEvent(winner, gains);
    }

    function withdraw() public {
        require(gameFinished && theWinner == msg.sender);

        uint amount = gains;

        gains = 0;
        hasWinnerWithdrawn = true;
        msg.sender.transfer(amount);
        resetGame();
    }
    
    function resetGame() public {
        require(hasWinnerWithdrawn && gameFinished);
        gameFinished = false;
        hasWinnerWithdrawn = false;
        wrestler1Played = false;
        wrestler2Played = false;
        wrestler1 = address(0);
        wrestler2 = address(0);
        wrestler1Deposit = 0;
        wrestler2Deposit = 0;
        gains = 0;
    }
}